from aima3.logic import *
from aima3.utils import *

kb = FolKB()
kb.tell(expr('Male(Jean)'))
kb.tell(expr('Male(Fabien)'))
kb.tell(expr('Male(Jerome)'))
kb.tell(expr('Male(Franck)'))
kb.tell(expr('Male(Bruno)'))
kb.tell(expr('Female(Evelyne)'))
kb.tell(expr('Female(Eve)'))
kb.tell(expr('Female(Louise)'))
kb.tell(expr('Female(Sophie)'))
kb.tell(expr('Female(Marie)'))
kb.tell(expr('Parent(Jean, Fabien)'))
kb.tell(expr('Parent(Fabien, Louise)'))
kb.tell(expr('Parent(Louise, Jerome)'))
kb.tell(expr('Parent(Louise, Sophie)'))
kb.tell(expr('Parent(Louise, Marie)'))
kb.tell(expr('Parent(Jerome, Franck)'))
kb.tell(expr('Parent(Sophie, Bruno)'))
kb.tell(expr('Parent(Sophie, Marie)'))
kb.tell(expr('Parent(Sophie, Eve)'))

kb.tell(expr('Parent(x, y) & Female(x) ==> Mother(x, y)'))
kb.tell(expr('Parent(x, y) & Male(x) ==> Father(x, y)'))
kb.tell(expr('(Parent(x, y) & Parent(x, z) & Sibling(y, z)) ==> Sibling(y, z)'))
kb.tell(expr('(Parent(x, y) & Parent(x, z) & Sibling(y, z) & Male(y)) ==> Brother(y, z)'))
kb.tell(expr('(Parent(x, y) & Parent(x, z) & Sibling(y, z) & Female(y)) ==> Sister(y, z)'))
kb.tell(expr('(Parent(x, y) & Brother(y, z)) ==> Uncle(x, z)'))
kb.tell(expr('(Parent(x, y) & Sister(y, z)) ==> Aunt(x, z)'))
kb.tell(expr('(Parent(x, y) & Parent(z, w) & Sibling(y, z)) ==> Cousin(x, w)'))
kb.tell(expr('(Parent(x, y)) ==> Ancestor(x, y)'))
kb.tell(expr('(Parent(x, y) & Ancestor(y, z)) ==> Ancestor(x, z)'))
# kb.tell(expr('(Ancestor(x, z) & Parent(x, y) ) ==> Ancestor(y, z)'))
print(kb.ask(expr('Ancestor(Jean, Franck)')))